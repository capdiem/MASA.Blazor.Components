@namespace Masa.Blazor.Experimental.Components
@using System.Globalization
@using System.Collections.ObjectModel

<MMenu Value="menuValue" ValueChanged="MenuValueChanged"
       OffsetY NudgeBottom="8" OpenOnClick CloseOnContentClick="false"
       ContentClass="px-6 py-4 white" ContentStyle="border-radius:16px">
    <ActivatorContent>
        <div class="d-inline-flex align-center">
            <MButton Text Small Class="d-flex align-center mr-1"
                     Style="font-size: 14px;"
                     @attributes="@context.Attrs">
                <MIcon Size="20" Class="mr-2">mdi-calendar</MIcon>
                <div>@FormatDateTime(startDateTime)</div>
                <MDivider Vertical Class="mx-2" Style="align-self: auto; height: 14px;" />
                <div>@FormatDateTime(endDateTime)</div>
            </MButton>
            <MChip Label Small Color="secondary">@Offset.Hours</MChip>
        </div>
    </ActivatorContent>
    <ChildContent>
        <div class="date-time-offset-picker__content mb-6 d-flex" style="width: 672px">
            <MDatePicker Value="internalStartDate" ValueChanged="StartDateChanged" TValue="DateOnly"
                         NoTitle FullWidth Class="mr-3 ml-n2"
                         AllowedDates="val => val <= internalEndDate">
                <TimeSelector @bind-Value="@internalStartTime"></TimeSelector>
            </MDatePicker>
            <MDatePicker Value="internalEndDate" ValueChanged="EndDateChanged" TValue="DateOnly"
                         NoTitle FullWidth Class="ml-3 mr-n2"
                         AllowedDates="val => val >= internalStartDate">
                <TimeSelector @bind-Value="@internalEndTime"></TimeSelector>
            </MDatePicker>
        </div>
        <div class="text-right mb-6">
            <MSelect Value="Offset"
                     ValueChanged="OffsetValueChanged"
                     Items="tzc"
                     ItemText='item => item.DisplayName'
                     ItemValue="item => item.BaseUtcOffset"
                     TValue="TimeSpan"
                     TItem="TimeZoneInfo"
                     TItemValue="TimeSpan"
                     Dense
                     Outlined
                     HideDetails="true"
                     Class="d-inline-block"
                     Style="width:200px">
            </MSelect>
        </div>
        <div class="text-right">
            <MButton Color="primary" Outlined OnClick="() => menuValue = false">Cancel</MButton>
            <MButton Color="primary" OnClick="OnConfirm">Confirm</MButton>
        </div>
    </ChildContent>
</MMenu>

@code {

    [Parameter]
    public TimeSpan Offset { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OffsetChanged { get; set; }

    public static ReadOnlyCollection<TimeZoneInfo> tzc = TimeZoneInfo.GetSystemTimeZones();

    private bool menuValue;

    private TimeSpan relatedTimeSpan;

    private DateTimeOffset startDateTime;
    private DateTimeOffset endDateTime;

    private DateOnly internalStartDate;
    private DateOnly internalEndDate;
    private TimeOnly internalStartTime;
    private TimeOnly internalEndTime;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        UpdateStartAndEndDateTime(TimeSpan.FromDays(-1));
    }

    private async Task OffsetValueChanged(TimeSpan offset)
    {
        Offset = offset;
        
        // TODO: use internalOffset
    }

    private void StartDateChanged(DateOnly val)
    {
        internalStartDate = val;
    }

    private void EndDateChanged(DateOnly val)
    {
        internalEndDate = val;
    }

    private void MenuValueChanged(bool val)
    {
        menuValue = val;

        if (val)
        {
            internalStartDate = DateOnly.FromDateTime(startDateTime.Date);
            internalEndDate = DateOnly.FromDateTime(endDateTime.Date);
        }
    }

    private void UpdateStartAndEndDateTime(TimeSpan timeSpan)
    {
        var now = DateTime.UtcNow;
        UpdateEndDateTime(new DateTimeOffset(now.Year, now.Month, now.Day, now.Hour, now.Minute, now.Second, Offset));
        UpdateStartDateTime(endDateTime.Add(timeSpan));
    }

    private void UpdateStartDateTime(DateTimeOffset val)
    {
        startDateTime = val;
        internalStartDate = DateOnly.FromDateTime(val.Date);
        internalStartTime = TimeOnly.FromDateTime(val.DateTime);
    }

    private void UpdateEndDateTime(DateTimeOffset val)
    {
        endDateTime = val;
        internalEndDate = DateOnly.FromDateTime(val.Date);
        internalEndTime = TimeOnly.FromDateTime(val.DateTime);
    }

    private async Task OnConfirm()
    {
        if (OffsetChanged.HasDelegate)
        {
            await OffsetChanged.InvokeAsync(Offset);
        }

        UpdateStartDateTime(new DateTimeOffset(internalStartDate.ToDateTime(internalStartTime), Offset));
        UpdateEndDateTime(new DateTimeOffset(internalEndDate.ToDateTime(internalEndTime), Offset));
        menuValue = false;
    }

    private string FormatDateTime(DateTimeOffset dateTimeOffset)
    {
        return dateTimeOffset.UtcDateTime.Add(Offset).ToString(CultureInfo.CurrentUICulture);
    }

}
