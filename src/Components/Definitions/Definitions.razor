@namespace Masa.Blazor.Experimental.Components

<MRow Align="AlignTypes.Center"
      Class="@Class"
      Dense="@Dense"
      NoGutters="@NoGutters"
      Style="@Style">
    @foreach (var item in Items!)
    {
        <MCol Cols="@Cols" Sm="@Sm" Md="@Md">
            <dl class="d-flex align-items-center @ItemClass" style="@ItemStyle">
                <dt class="@TermClass" style="white-space: pre;@TermStyle">@item.Key@Colon</dt>
                <dd class="@DetailClass" style="@DetailStyle">
                    @if (ItemContent == null)
                    {
                        @item.Value
                    }
                    else
                    {
                        @ItemContent(item)
                    }
                </dd>
            </dl>
        </MCol>
    }
</MRow>

@code
{
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Colon { get; set; }

    [Parameter]
    public StringNumber? Cols { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public string? DetailClass { get; set; }

    [Parameter]
    public string? DetailStyle { get; set; }

    [Parameter]
    public string? ItemClass { get; set; }

    [Parameter]
    public RenderFragment<KeyValuePair<string, object>>? ItemContent { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<string, object>? Items { get; set; }

    [Parameter]
    public string? ItemStyle { get; set; }

    [Parameter]
    public StringNumber? Md { get; set; }

    [Parameter]
    public bool NoGutters { get; set; }

    [Parameter]
    public StringNumber? Sm { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? TermClass { get; set; }

    [Parameter]
    public string? TermStyle { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Cols = 12;
        Sm = 6;
        Md = 4;
        Colon = ": ";
        Dense = true;

        await base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Items ??= new Dictionary<string, object>();
    }
}