@using System.ComponentModel.DataAnnotations
@namespace MASA.Blazor.Experimental.Components
@inherits PopupComponentBase

<MDialog Value="Visible"
         Width="420"
         Persistent="true"
         @attributes="@Attributes">
    <MCard>
        @if (Title != null)
        {
            <MCardTitle>@Title</MCardTitle>
        }

        <MCardText Style="padding-bottom: 0">
            @Content
            <MForm Model="this" EnableDataAnnotationsValidation @ref="_form" OnSubmit="HandleOnSubmit">
                <MTextarea @bind-Value="Value" Outlined Dense HideDetails="@("auto")" Placeholder="@Placeholder"></MTextarea>
            </MForm>
        </MCardText>

        <MCardActions>
            <MSpacer/>
            <MButton Text OnClick="HandleOnCancel">取消</MButton>
            <MButton Text Color="primary" OnClick="HandleOnOk">确定</MButton>
        </MCardActions>
    </MCard>
</MDialog>

@code {

    [Parameter]
    public string? Content { get; set; }

    [Parameter]
    public Func<PopupOkEventArgs<string>, Task>? OnOk { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    [Required(ErrorMessage = "The value cannot be empty.")]
    public string Value { get; set; }

    private MForm _form;

    private Task HandleOnCancel()
    {
        Visible = false;
        return SetResult(null);
    }

    private async Task HandleOnSubmit()
    {
        PopupOkEventArgs<string> args = new(Value);

        if (OnOk != null)
        {
            await OnOk.Invoke(args);
        }

        if (args.Cancel is null or false)
        {
            Visible = false;
            await SetResult(Value);
        }
    }

    private async Task HandleOnOk()
    {
        if (_form.EditContext.Validate())
        {
            await HandleOnSubmit();
        }
    }

    private async Task SetResult(string value)
    {
        if (PopupItem != null)
        {
            await Task.Delay(256);
            PopupItem.Discard(value);
        }
    }

}