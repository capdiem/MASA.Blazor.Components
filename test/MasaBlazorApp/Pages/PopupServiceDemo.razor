@page "/popup-service"

<MRadioGroup @bind-Value="alertType">
    <MRadio Value="AlertTypes.Success" Label="@nameof(AlertTypes.Success)"></MRadio>
    <MRadio Value="AlertTypes.Warning" Label="@nameof(AlertTypes.Warning)"></MRadio>
    <MRadio Value="AlertTypes.Error" Label="@nameof(AlertTypes.Error)"></MRadio>
    <MRadio Value="AlertTypes.Info" Label="@nameof(AlertTypes.Info)"></MRadio>
</MRadioGroup>

<h2>Alert</h2>

<MButton Class="text-capitalize"
         Color="primary"
         OnClick="ShowAlert">
    Show Alert
</MButton>

<MDivider Class="my-2"></MDivider>

<h2>Confirm</h2>

<MButton Class="text-capitalize"
         Color="primary"
         OnClick="Confirm_OnOkAsync">
    OnOk Async
</MButton>
<MButton Class="text-capitalize"
         Color="primary"
         OnClick="Confirm_OnOkAsync_WithException">
    OnOk Async with exception
</MButton>

<MDivider Class="my-2"></MDivider>

<h2>Prompt</h2>

<MButton Class="text-capitalize"
         Color="primary"
         OnClick="Prompt_OnOk">
    Enter value and OnOk
</MButton>

<MButton Class="text-capitalize"
         Color="primary"
         OnClick="Prompt_OnOkAsync">
    Enter value and OnOk Async
</MButton>

@code {

    [Inject]
    private IPopupService PopupService { get; set; }

    private AlertTypes alertType = AlertTypes.Success;

    private async Task ShowAlert()
    {
        await PopupService.AlertAsync("There is the content.", alertType);
    }

    private async Task Confirm_OnOkAsync()
    {
        var confirmed = await PopupService.ConfirmAsync(
            "Title",
            "There is the content.",
            alertType,
            async e => await Task.Delay(2000)
            );

        if (confirmed)
        {
            await PopupService.AlertAsync("Ok was clicked!", AlertTypes.Info);
        }
        else
        {
            await PopupService.AlertAsync("Cancel was clicked!", AlertTypes.Warning);
        }
    }

    private async Task Confirm_OnOkAsync_WithException()
    {
        var confirmed = await PopupService.ConfirmAsync(
            "Title",
            "There is the content.",
            alertType,
            async e =>
            {
                try
                {
                    await Task.Delay(2000);
                    throw new Exception("something wrong happens!");
                }
                catch (Exception ex)
                {
                    e.Cancel = true;
                    await PopupService.AlertAsync(ex);
                }
            });

        if (confirmed)
        {
            await PopupService.AlertAsync("Ok was clicked!", AlertTypes.Info);
        }
        else
        {
            await PopupService.AlertAsync("Cancel was clicked!", AlertTypes.Warning);
        }
    }

    private async Task Prompt_OnOk()
    {
        var res = await PopupService.PromptAsync("Title", "Please enter the 'Content' to confirm");

        if (res == null)
        {
            await PopupService.AlertAsync($"Cancel button was clicked!");
            return;
        }

        if (res != "Content")
        {
            await PopupService.AlertAsync($"Input content('{res}') is not equal to 'Content'", AlertTypes.Error);
            return;
        }

        await PopupService.AlertAsync($"Input content('{res}') is equal to 'Content'", AlertTypes.Success);
    }

    private async Task Prompt_OnOkAsync()
    {
        await PopupService.PromptAsync(
            "Title",
            "Please enter the 'Content' to confirm",
            async e =>
            {
                if (e.Value == "Content")
                {
                    await Task.Delay(2000);
                }
                else
                {
                    // TODO: bug here, value in textarea would be clear!
                    await PopupService.AlertAsync($"Input content('{e.Value}') is not equal to 'Content'", AlertTypes.Error);
                    e.Cancel = true;
                }
            });
    }

}